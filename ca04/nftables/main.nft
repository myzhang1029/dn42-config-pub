#!/usr/sbin/nft -f
# vi: ft=nftables
# /etc/nftables/main.nft

flush ruleset


table inet main {
    # dn42 interfaces
    set dn42_interfaces {
        type ifname
        # TODO: distinguish our interfaces from others
        elements = {
            "ztbtosre7x",
            "wginternal",
            "wg1816potat0las",
            "wg1817kskbusf",
            "wg2189iedonsjc",
            "wg2717hujknyb",
            "wg3914kiouus2",
            "wg1111kskbneoca",
            "wg0207rbitstor",
            "wg2225maraunus",
            "wg3035lareuse2",
            "wg2016sdrltor",
            # __MAKE_PEERING_MARKER Do not remove this comment
        }
    }
    # dn42 assigned addresses
    define dn42_self_ipv4 = 172.23.6.161
    define dn42_self_ipv6 = fdc0:d227:306:ee01::1
    # dn42 services on this host
    set dn42_ports {
        type inet_proto . inet_service
        # Has dns, http, and squid (squid has its ACL)
        elements = {
            tcp . domain,
            udp . domain,
            tcp . http,
            udp . http,
            tcp . 3128,
            udp . ntp,
        }
    }

    # Public interface
    set public_interfaces {
        type ifname
        elements = { "enp0s3" }
    }

    # 44Net interfaces
    set ampr_interfaces {
        type ifname
        elements = { "tunl0" }
    }

    include "/etc/nftables/oracle.nft"
    include "/etc/nftables/dn42-chains.nft"
    include "/etc/nftables/ampr-chains.nft"
    include "/etc/nftables/shared-chains.nft"
    include "/etc/nftables/public-chains.nft"

    chain nat_POSTROUTING {
        type nat hook postrouting priority srcnat + 10; policy accept;
        oifname @public_interfaces goto nat_POST_public
        oifname @dn42_interfaces goto nat_POST_dn42
        oifname @ampr_interfaces goto nat_POST_ampr
        goto nat_POST_public
    }

    chain filter_INPUT {
        type filter hook input priority filter + 10; policy drop;
        ct state { established, related } accept
        ct status dnat accept
        iifname "lo" accept
        ct state invalid log prefix "INPUT_STATE_INVALID_DROP: " drop
        iifname @public_interfaces jump filter_IN_public
        iifname @dn42_interfaces jump filter_IN_dn42
        iifname @ampr_interfaces jump filter_IN_ampr
        jump filter_IN_public
        # Should have reached a decision by now
        log prefix "filter_INPUT_FINAL_REJECT: " counter reject with icmpx admin-prohibited
    }

    chain filter_FORWARD {
        type filter hook forward priority filter + 10; policy drop;
        ct state { established, related } accept
        ct status dnat accept
        iifname "lo" accept
        # Putting this here is slightly not ideal TODO: restructure the forward chain
        # Allow our traffic to access 44Net
        iifname @dn42_interfaces ip saddr $dn42_self_ipv4_prefix oifname @ampr_interfaces counter accept
        # Allow 44Net to access our services
        iifname @ampr_interfaces oifname @dn42_interfaces ip daddr $ampr_self_prefix counter accept
        iifname @dn42_interfaces jump filter_FWD_dn42
        iifname @public_interfaces jump filter_FWD_public
        iifname @ampr_interfaces jump filter_FWD_ampr
        jump filter_FWD_public
        jump filter_policy_drop_martian
        # These are immune from conntrack drop
        iifname @dn42_interfaces oifname @dn42_interfaces return
        ct state invalid log prefix "FORWARD_STATE_INVALID_DROP: " drop
        # Should have reached a decision by now
        log prefix "filter_FORWARD_FINAL_REJECT: " counter reject with icmpx admin-prohibited
    }
}
