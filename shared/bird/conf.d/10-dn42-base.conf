define dn42_asn = 4242420893;
define dn42_net4 = 172.23.6.160/27;
define dn42_net6 = fdc0:d227:306::/48;
define dn42_netset4 = [172.23.6.160/27+];
define dn42_netset6 = [fdc0:d227:306::/48+];
include "/etc/bird/conf.d/10-dn42-node.subconf";

ipv4 table dn42_v4;
ipv6 table dn42_v6;

roa4 table dn42_roa_v4;
roa6 table dn42_roa_v6;

protocol rpki dn42_rpki {
    roa4 { table dn42_roa_v4; };
    roa6 { table dn42_roa_v6; };

    remote fdc0:d227:306:ca04::1 port 8082;

    retry keep 90;
    refresh keep 900;
    expire keep 172800;
}

function is_self_net_v4() -> bool {
    return net ~ dn42_netset4;
}
function is_self_net_v6() -> bool {
    return net ~ dn42_netset6;
}

function is_valid_network_v4() -> bool {
    return net ~ [
        172.20.0.0/14{21,29}, # dn42
        172.20.0.0/24{28,32}, # dn42 Anycast
        172.21.0.0/24{28,32}, # dn42 Anycast
        172.22.0.0/24{28,32}, # dn42 Anycast
        172.23.0.0/24{28,32}, # dn42 Anycast
        172.31.0.0/16+,       # ChaosVPN
        10.100.0.0/14+,       # ChaosVPN
        10.127.0.0/16{16,32}, # neonetwork
        10.0.0.0/8{15,24}     # Freifunk.net
    ];
}
function is_valid_network_v6() -> bool {
    return net ~ [
        fd00::/8{44,64} # ULA address space as per RFC 4193
    ];
}

filter dn42_ebgp_export_filter_v4 {
    if ! is_valid_network_v4() then reject;
    if source ~ [RTS_STATIC, RTS_BGP] then accept;
    reject;
}

filter dn42_ebgp_export_filter_v6 {
    if ! is_valid_network_v6() then reject;
    if source ~ [RTS_STATIC, RTS_BGP] then accept;
    reject;
}

filter dn42_ebgp_import_filter_v4 {
    if is_valid_network_v4() && !is_self_net_v4() then {
      if (roa_check(dn42_roa_v4, net, bgp_path.last) != ROA_VALID) then {
        print "[dn42] ROA check failed for ", net, " AS", bgp_path.last;
        reject;
      } else {
        bgp_large_community.add(dn42_node_import_lc);
        accept;
      }
    } else reject;
}

filter dn42_ebgp_import_filter_v6 {
    if is_valid_network_v6() && !is_self_net_v6() then {
      if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
        print "[dn42] ROA check failed for ", net, " AS", bgp_path.last;
        reject;
      } else {
        bgp_large_community.add(dn42_node_import_lc);
        accept;
      }
    } else reject;
}

protocol static dn42_static4 {
    route dn42_net4 reject;

    ipv4 {
        table dn42_v4;
        import all;
        export none;
    };
}
protocol static dn42_static6 {
    route dn42_net6 reject;

    ipv6 {
        table dn42_v6;
        import all;
        export none;
    };
}

# dn42 exports all routes to master
# master exports only (static and BGP) dn42 routes to dn42
protocol pipe dn42_master4 {
    table master4;
    peer table dn42_v4;
    import all;
    export filter dn42_ebgp_export_filter_v4;
}
protocol pipe dn42_master6 {
    table master6;
    peer table dn42_v6;
    import all;
    export filter dn42_ebgp_export_filter_v6;
}

template bgp dnpeers {
    local as dn42_asn;
    path metric on;

    ipv4 {
        table dn42_v4;
        extended next hop on;
        import filter dn42_ebgp_import_filter_v4;
        export filter dn42_ebgp_export_filter_v4;
        import limit 5000 action block;
    };

    ipv6 {
        table dn42_v6;
        import filter dn42_ebgp_import_filter_v6;
        export filter dn42_ebgp_export_filter_v6;
        import limit 5000 action block;
    };
}

filter dn42_ibgp_export {
    # Do not propagate fake routes from cn05
    if (bgp_path ~ [4241001437]) then {
        reject;
    }
    # Export all other BGP routes
    if (source = RTS_BGP) then {
        if is_valid_network_v4() then accept;
        if is_valid_network_v6() then accept;
    }
    reject;
}

template bgp dn42_ibgp {
    local as dn42_asn;
    path metric on;
    med metric on;
    enable extended messages on;
    source address dn42_thisaddr6;
    ttl security on;
    ipv4 {
        table master4;
        aigp originate;
        next hop self yes;
        add paths on;
        extended next hop on;
        import where source = RTS_BGP;
        export filter dn42_ibgp_export;
    };
    ipv6 {
        table master6;
        aigp originate;
        next hop self yes;
        add paths on;
        import where source = RTS_BGP;
        export filter dn42_ibgp_export;
    };
}
