define inet_asn = 211585;
define inet_netset_internal4 = [];
define inet_netset4 = [];
define inet_netset_internal6 = [2a0b:4b81:1003::/48+, 2a0b:4b81:1008::/48+];
define inet_netset6 = [2a0b:4b81:1003::/48, 2a0b:4b81:1008::/48];

ipv4 table inet_v4;
ipv6 table inet_v6;

roa4 table inet_roa_v4;
roa6 table inet_roa_v6;

protocol rpki inet_rpki {
    roa4 { table inet_roa_v4; };
    roa6 { table inet_roa_v6; };

    remote fdc0:d227:306:ca04::1 port 8282;

    retry keep 90;
    refresh keep 900;
    expire keep 172800;
}

function inet_ebgp_import_filter(
        int location; int peer_asn; int latency_100us;
        prefix set allowed_v4; prefix set allowed_v6
) {
    bgp_large_community.add((211585, 40, location));
    bgp_large_community.add((211585, 41, peer_asn));
    bgp_large_community.add((211585, 30, latency_100us));
    if (bgp_path.len = 1) then
        bgp_local_pref = bgp_local_pref + 500;
    if net.type = NET_IP4 then {
        if net = 0.0.0.0/0 then reject;
        if allowed_v4 != [] && net !~ allowed_v4 then {
            print "[inet] Unauthorized ", net, ", exported by AS", peer_asn, " path ", bgp_path;
            reject;
        }
        case roa_check(inet_roa_v4, net, bgp_path.last_nonaggregated) {
            ROA_VALID: bgp_large_community.add((211585, 42, 1));
            ROA_UNKNOWN: bgp_large_community.add((211585, 42, 0));
            ROA_INVALID: {
                print "[inet] ROA check failed for ", net, " AS", bgp_path.last;
                reject;
            }
        }
    }
    if net.type = NET_IP6 then {
        if net = ::/0 then reject;
        if allowed_v6 != [] && net !~ allowed_v6 then {
            print "[inet] Unauthorized ", net, ", exported by AS", peer_asn, " path ", bgp_path;
            reject;
        }
        case roa_check(inet_roa_v6, net, bgp_path.last_nonaggregated) {
            ROA_VALID: bgp_large_community.add((211585, 42, 1));
            ROA_UNKNOWN: bgp_large_community.add((211585, 42, 0));
            ROA_INVALID: {
                print "[inet] ROA check failed for ", net, " AS", bgp_path.last;
                reject;
            }
        }
    }
    accept;
}

function inet_ebgp_upstream_filter(int location; int peer_asn; int latency_100us)  {
    bgp_large_community.add((211585, 50, location));
    bgp_large_community.add((211585, 51, peer_asn));
    bgp_med = 0;
    bgp_med = bgp_med + latency_100us;
    if (net.type = NET_IP4 && net !~ inet_netset4) || (net.type = NET_IP6 && net !~ inet_netset6) then reject;
    if (net.type = NET_IP4 && net.len > 25) then {
        print "[inet] Internal prefix included in inet_netset4: ", net;
        reject;
    }
    if (net.type = NET_IP6 && net.len > 49) then {
        print "[inet] Internal prefix included in inet_netset6: ", net;
        reject;
    }
    if source ~ [RTS_STATIC, RTS_BGP] then accept;
    reject;
}

filter inet_ebgp_downstream_filter {
    if (net.type = NET_IP4 && net.len > 25) then reject;
    if (net.type = NET_IP6 && net.len > 49) then reject;
    if source = RTS_STATIC then {
        print "[inet export static] ", net;
        accept;
    }
    if source = RTS_BGP then accept;
    reject;
}

filter inet_ibgp_import {
    if net = 0.0.0.0/0 then reject;
    if net = ::/0 then reject;
    if source = RTS_BGP then accept;
    reject;
}

filter inet_ibgp_export {
    if net = 0.0.0.0/0 then reject;
    if net = ::/0 then reject;
    # Do not propagate fake routes from cn05
    if (bgp_path ~ [4241001437]) then reject;
    # Export all other BGP routes
    if (source = RTS_BGP) then accept;
    reject;
}

include "/etc/bird/conf.d/10-inet-kernel-export-filter.subconf";

protocol static inet_static6 {
    route 2a0b:4b81:1008::/48 reject;

    ipv6 {
        table inet_v6;
        import all;
        export none;
    };
}

protocol kernel inet_kernel4 {
    kernel table 211585;
    scan time 60;
    netlink rx buffer 1048576;

    ipv4 {
        table inet_v4;
        import none;
        export filter inet_kernel_export4;
    };
}

protocol kernel inet_kernel6 {
    kernel table 211585;
    scan time 60;
    netlink rx buffer 1048576;

    ipv6 {
        table inet_v6;
        import none;
        export filter inet_kernel_export6;
    };
}

filter inet_from_master_filter {
    # Make our own routes appear in both tables
    if net ~ inet_netset_internal4 then accept;
    if net ~ inet_netset_internal6 then accept;
    # Reject DN42
    if is_valid_network_v4() then reject;
    if is_valid_network_v6() then reject;
    if source = RTS_BGP then accept;
    reject;
}
protocol pipe inet_master4 {
    table master4;
    peer table inet_v4;
    import all;
    export filter inet_from_master_filter;
}

protocol pipe inet_master6 {
    table master6;
    peer table inet_v6;
    import all;
    export filter inet_from_master_filter;
}

template bgp inet_ibgp {
    local as inet_asn;
    path metric on;
    med metric on;
    enable extended messages on;
    ipv4 {
        table master4;
        aigp originate;
        next hop self yes;
        add paths on;
        extended next hop on;
        import filter inet_ibgp_import;
        export filter inet_ibgp_export;
    };
    ipv6 {
        table master6;
        aigp originate;
        next hop self yes;
        add paths on;
        import filter inet_ibgp_import;
        export filter inet_ibgp_export;
    };
}
